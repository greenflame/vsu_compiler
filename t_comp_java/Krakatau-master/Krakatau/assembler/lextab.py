# lextab.py. This file automatically created by PLY (version 3.8). Don't edit!
_tabversion   = '3.8'
_lextokens    = set(['OP_FIELD', 'OBJECT', 'OP_CLASS_INT', 'OP_LBL', 'PROTECTED', 'OP_LDC1', 'NEWLINE', 'LONG', 'D_SIGNATURE', 'OP_CLASS', 'VARARGS', 'METHOD', 'D_INNER', 'FULL', 'OP_DYNAMIC', 'ENUM', 'D_INNERLENGTH', 'OP_LDC2', 'D_CATCH', 'UNINITIALIZED', 'D_LINE', 'INTERFACEMETHOD', 'STACK', 'D_VAR', 'DOUBLE', 'INTERFACE', 'D_SOURCE', 'SYNCHRONIZED', 'STATIC', 'OP_NONE', 'D_METHOD', 'FINAL', 'D_CLASS', 'SAME_LOCALS_1_STACK_ITEM_EXTENDED', 'TRANSIENT', 'COLON', 'INTEGER', 'D_LIMIT', 'EQUALS', 'D_ANNOTATIONDEFAULT', 'D_INTERFACE', 'METHODHANDLE', 'ANNOTATION', 'D_RUNTIMEINVISIBLE', 'INT', 'D_CONST', 'SYNTHETIC', 'OP_INT', 'DEFAULT', 'D_ENCLOSING', 'D_FIELD', 'FLOAT_LITERAL', 'APPEND', 'NATIVE', 'WORD', 'INVOKEDYNAMIC', 'STRICTFP', 'UTF8', 'CPINDEX', 'D_END', 'D_RUNTIMEVISIBLE', 'ARRAY', 'TOP', 'SAME_EXTENDED', 'D_VERSION', 'UNINITIALIZEDTHIS', 'FIELD', 'D_THROWS', 'METHODTYPE', 'OP_WIDE', 'FROM', 'D_CODEATTRIBUTE', 'OP_NEWARR', 'VOLATILE', 'D_STACK', 'INT_LITERAL', 'USING', 'PUBLIC', 'BRIDGE', 'ABSTRACT', 'OP_LOOKUPSWITCH', 'OP_INT_INT', 'LONG_LITERAL', 'NULL', 'PARAMETER', 'LOCALS', 'DOUBLE_LITERAL', 'PRIVATE', 'CHOP', 'TO', 'SAME_LOCALS_1_STACK_ITEM', 'CLASS', 'STRING', 'IS', 'OP_TABLESWITCH', 'OP_METHOD', 'OP_METHOD_INT', 'STRING_LITERAL', 'D_ATTRIBUTE', 'FLOAT', 'SAME', 'D_IMPLEMENTS', 'D_SUPER', 'SUPER', 'NAMEANDTYPE'])
_lexreflags   = 0
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_ignore_COMMENT>;.*)|(?P<t_NEWLINE>\\n+)|(?P<t_STRING_LITERAL>[uUbB]?[rR]?(?:\n        """[^"\\\\]*              # any number of unescaped characters\n            (?:\\\\.[^"\\\\]*       # escaped followed by 0 or more unescaped\n                |"[^"\\\\]+       # single quote followed by at least one unescaped\n                |""[^"\\\\]+      # two quotes followed by at least one unescaped\n            )*"""\n        |"[^"\\n\\\\]*              # any number of unescaped characters\n            (?:\\\\.[^"\\n\\\\]*      # escaped followed by 0 or more unescaped\n            )*"\n                         # concatenated string literals\n        |\'\'\'[^\'\\\\]*              # any number of unescaped characters\n            (?:\\\\.[^\'\\\\]*       # escaped followed by 0 or more unescaped\n                |\'[^\'\\\\]+       # single quote followed by at least one unescaped\n                |\'\'[^\'\\\\]+      # two quotes followed by at least one unescaped\n            )*\'\'\'\n        |\'[^\'\\n\\\\]*              # any number of unescaped characters\n            (?:\\\\.[^\'\\n\\\\]*      # escaped followed by 0 or more unescaped\n            )*\'\n        ))|(?P<t_FLOAT_LITERAL>(?:\n    [Nn][Aa][Nn]|                                       #Nan\n    [-+]?(?:                                            #Inf and normal both use sign\n        [Ii][Nn][Ff]|                                   #Inf\n        \\d+\\.\\d*(?:[eE][+-]?\\d+)?|                         #decimal float\n        \\d+[eE][+-]?\\d+|                                   #decimal float with no fraction (exponent mandatory)\n        0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+[pP][+-]?\\d+        #hexidecimal float\n        )\n    )\n[fF])|(?P<t_DOUBLE_LITERAL>(?:\n    [Nn][Aa][Nn]|                                       #Nan\n    [-+]?(?:                                            #Inf and normal both use sign\n        [Ii][Nn][Ff]|                                   #Inf\n        \\d+\\.\\d*(?:[eE][+-]?\\d+)?|                         #decimal float\n        \\d+[eE][+-]?\\d+|                                   #decimal float with no fraction (exponent mandatory)\n        0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+[pP][+-]?\\d+        #hexidecimal float\n        )\n    )\n)|(?P<t_LONG_LITERAL>[+-]?(?:0[xX][0-9a-fA-F]+|[0-9]+)[lL])|(?P<t_INT_LITERAL>[+-]?(?:0[xX][0-9a-fA-F]+|[0-9]+))|(?P<t_CPINDEX>\\[[0-9a-z_]+\\])|(?P<t_WORD>[^\\s:="\']+)|(?P<t_COLON>:)|(?P<t_EQUALS>=)', [None, ('t_ignore_COMMENT', 'ignore_COMMENT'), ('t_NEWLINE', 'NEWLINE'), ('t_STRING_LITERAL', 'STRING_LITERAL'), ('t_FLOAT_LITERAL', 'FLOAT_LITERAL'), ('t_DOUBLE_LITERAL', 'DOUBLE_LITERAL'), ('t_LONG_LITERAL', 'LONG_LITERAL'), ('t_INT_LITERAL', 'INT_LITERAL'), ('t_CPINDEX', 'CPINDEX'), ('t_WORD', 'WORD'), (None, 'COLON'), (None, 'EQUALS')])]}
_lexstateignore = {'INITIAL': ' \t\r'}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
