//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g 2015-10-05 17:13:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  t_comp 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class cParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD", "ASSIGN", "BLOCK", "DIV", "ELSE", "EQUALS", "FOR", "GE", "GT", "ID", "IF", "LADD", "LE", "LMUL", "LOGIC", "LT", "ML_COMMENT", "MUL", "NEQUALS", "NUMBER", "PROGRAM", "READ", "SL_COMMENT", "STRING", "SUB", "WRITE", "WS", "'('", "')'", "');'", "','", "';'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int ADD=4;
	public const int ASSIGN=5;
	public const int BLOCK=6;
	public const int DIV=7;
	public const int ELSE=8;
	public const int EQUALS=9;
	public const int FOR=10;
	public const int GE=11;
	public const int GT=12;
	public const int ID=13;
	public const int IF=14;
	public const int LADD=15;
	public const int LE=16;
	public const int LMUL=17;
	public const int LOGIC=18;
	public const int LT=19;
	public const int ML_COMMENT=20;
	public const int MUL=21;
	public const int NEQUALS=22;
	public const int NUMBER=23;
	public const int PROGRAM=24;
	public const int READ=25;
	public const int SL_COMMENT=26;
	public const int STRING=27;
	public const int SUB=28;
	public const int WRITE=29;
	public const int WS=30;

	public cParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public cParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return cParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_value_group();
	partial void LeaveRule_value_group();
	// $ANTLR start "value_group"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:77:1: value_group : ( '(' ! value_add ')' !| NUMBER | STRING | ID | LOGIC );
	[GrammarRule("value_group")]
	private AstParserRuleReturnScope<object, IToken> value_group()
	{
		EnterRule_value_group();
		EnterRule("value_group", 1);
		TraceIn("value_group", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal1 = default(IToken);
		IToken char_literal3 = default(IToken);
		IToken NUMBER4 = default(IToken);
		IToken STRING5 = default(IToken);
		IToken ID6 = default(IToken);
		IToken LOGIC7 = default(IToken);
		AstParserRuleReturnScope<object, IToken> value_add2 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal1_tree = default(object);
		object char_literal3_tree = default(object);
		object NUMBER4_tree = default(object);
		object STRING5_tree = default(object);
		object ID6_tree = default(object);
		object LOGIC7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "value_group");
		DebugLocation(77, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:2: ( '(' ! value_add ')' !| NUMBER | STRING | ID | LOGIC )
			int alt1=5;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case 31:
				{
				alt1 = 1;
				}
				break;
			case NUMBER:
				{
				alt1 = 2;
				}
				break;
			case STRING:
				{
				alt1 = 3;
				}
				break;
			case ID:
				{
				alt1 = 4;
				}
				break;
			case LOGIC:
				{
				alt1 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:4: '(' ! value_add ')' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 7);
				char_literal1=(IToken)Match(input,31,Follow._31_in_value_group430); 
				DebugLocation(78, 9);
				PushFollow(Follow._value_add_in_value_group433);
				value_add2=value_add();
				PopFollow();

				adaptor.AddChild(root_0, value_add2.Tree);
				DebugLocation(78, 22);
				char_literal3=(IToken)Match(input,32,Follow._32_in_value_group435); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:26: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 26);
				NUMBER4=(IToken)Match(input,NUMBER,Follow._NUMBER_in_value_group440); 
				NUMBER4_tree = (object)adaptor.Create(NUMBER4);
				adaptor.AddChild(root_0, NUMBER4_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:35: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 35);
				STRING5=(IToken)Match(input,STRING,Follow._STRING_in_value_group444); 
				STRING5_tree = (object)adaptor.Create(STRING5);
				adaptor.AddChild(root_0, STRING5_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:44: ID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 44);
				ID6=(IToken)Match(input,ID,Follow._ID_in_value_group448); 
				ID6_tree = (object)adaptor.Create(ID6);
				adaptor.AddChild(root_0, ID6_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:78:49: LOGIC
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 49);
				LOGIC7=(IToken)Match(input,LOGIC,Follow._LOGIC_in_value_group452); 
				LOGIC7_tree = (object)adaptor.Create(LOGIC7);
				adaptor.AddChild(root_0, LOGIC7_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value_group", 1);
			LeaveRule("value_group", 1);
			LeaveRule_value_group();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "value_group"); }
		return retval;

	}
	// $ANTLR end "value_group"

	partial void EnterRule_value_mult();
	partial void LeaveRule_value_mult();
	// $ANTLR start "value_mult"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:81:1: value_mult : value_group ( ( MUL | DIV ) ^ value_group )* ;
	[GrammarRule("value_mult")]
	private AstParserRuleReturnScope<object, IToken> value_mult()
	{
		EnterRule_value_mult();
		EnterRule("value_mult", 2);
		TraceIn("value_mult", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set9 = default(IToken);
		AstParserRuleReturnScope<object, IToken> value_group8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> value_group10 = default(AstParserRuleReturnScope<object, IToken>);

		object set9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "value_mult");
		DebugLocation(81, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:82:2: ( value_group ( ( MUL | DIV ) ^ value_group )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:82:4: value_group ( ( MUL | DIV ) ^ value_group )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(82, 4);
			PushFollow(Follow._value_group_in_value_mult464);
			value_group8=value_group();
			PopFollow();

			adaptor.AddChild(root_0, value_group8.Tree);
			DebugLocation(82, 16);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:82:16: ( ( MUL | DIV ) ^ value_group )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==DIV||LA2_1==MUL))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:82:18: ( MUL | DIV ) ^ value_group
					{
					DebugLocation(82, 31);

					set9=(IToken)input.LT(1);
					set9=(IToken)input.LT(1);
					if (input.LA(1)==DIV||input.LA(1)==MUL)
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set9), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(82, 33);
					PushFollow(Follow._value_group_in_value_mult479);
					value_group10=value_group();
					PopFollow();

					adaptor.AddChild(root_0, value_group10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value_mult", 2);
			LeaveRule("value_mult", 2);
			LeaveRule_value_mult();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "value_mult"); }
		return retval;

	}
	// $ANTLR end "value_mult"

	partial void EnterRule_value_add();
	partial void LeaveRule_value_add();
	// $ANTLR start "value_add"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:85:1: value_add : value_mult ( ( ADD | SUB ) ^ value_mult )* ;
	[GrammarRule("value_add")]
	private AstParserRuleReturnScope<object, IToken> value_add()
	{
		EnterRule_value_add();
		EnterRule("value_add", 3);
		TraceIn("value_add", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set12 = default(IToken);
		AstParserRuleReturnScope<object, IToken> value_mult11 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> value_mult13 = default(AstParserRuleReturnScope<object, IToken>);

		object set12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "value_add");
		DebugLocation(85, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:86:2: ( value_mult ( ( ADD | SUB ) ^ value_mult )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:86:4: value_mult ( ( ADD | SUB ) ^ value_mult )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(86, 4);
			PushFollow(Follow._value_mult_in_value_add494);
			value_mult11=value_mult();
			PopFollow();

			adaptor.AddChild(root_0, value_mult11.Tree);
			DebugLocation(86, 15);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:86:15: ( ( ADD | SUB ) ^ value_mult )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==ADD||LA3_1==SUB))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:86:17: ( ADD | SUB ) ^ value_mult
					{
					DebugLocation(86, 30);

					set12=(IToken)input.LT(1);
					set12=(IToken)input.LT(1);
					if (input.LA(1)==ADD||input.LA(1)==SUB)
					{
						input.Consume();
						root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set12), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(86, 32);
					PushFollow(Follow._value_mult_in_value_add509);
					value_mult13=value_mult();
					PopFollow();

					adaptor.AddChild(root_0, value_mult13.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("value_add", 3);
			LeaveRule("value_add", 3);
			LeaveRule_value_add();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "value_add"); }
		return retval;

	}
	// $ANTLR end "value_add"

	partial void EnterRule_logic_group();
	partial void LeaveRule_logic_group();
	// $ANTLR start "logic_group"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:90:1: logic_group : value_add ( ( GE | LE | NEQUALS | EQUALS | GT | LT ) ^ value_add )? ;
	[GrammarRule("logic_group")]
	private AstParserRuleReturnScope<object, IToken> logic_group()
	{
		EnterRule_logic_group();
		EnterRule("logic_group", 4);
		TraceIn("logic_group", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set15 = default(IToken);
		AstParserRuleReturnScope<object, IToken> value_add14 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> value_add16 = default(AstParserRuleReturnScope<object, IToken>);

		object set15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logic_group");
		DebugLocation(90, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:92:2: ( value_add ( ( GE | LE | NEQUALS | EQUALS | GT | LT ) ^ value_add )? )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:92:4: value_add ( ( GE | LE | NEQUALS | EQUALS | GT | LT ) ^ value_add )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 4);
			PushFollow(Follow._value_add_in_logic_group526);
			value_add14=value_add();
			PopFollow();

			adaptor.AddChild(root_0, value_add14.Tree);
			DebugLocation(92, 14);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:92:14: ( ( GE | LE | NEQUALS | EQUALS | GT | LT ) ^ value_add )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==EQUALS||(LA4_1>=GE && LA4_1<=GT)||LA4_1==LE||LA4_1==LT||LA4_1==NEQUALS))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:92:16: ( GE | LE | NEQUALS | EQUALS | GT | LT ) ^ value_add
				{
				DebugLocation(92, 56);

				set15=(IToken)input.LT(1);
				set15=(IToken)input.LT(1);
				if (input.LA(1)==EQUALS||(input.LA(1)>=GE && input.LA(1)<=GT)||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NEQUALS)
				{
					input.Consume();
					root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set15), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(92, 58);
				PushFollow(Follow._value_add_in_logic_group557);
				value_add16=value_add();
				PopFollow();

				adaptor.AddChild(root_0, value_add16.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_group", 4);
			LeaveRule("logic_group", 4);
			LeaveRule_logic_group();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_group"); }
		return retval;

	}
	// $ANTLR end "logic_group"

	partial void EnterRule_logic_mult();
	partial void LeaveRule_logic_mult();
	// $ANTLR start "logic_mult"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:95:1: logic_mult : logic_group ( LMUL ^ logic_group )* ;
	[GrammarRule("logic_mult")]
	private AstParserRuleReturnScope<object, IToken> logic_mult()
	{
		EnterRule_logic_mult();
		EnterRule("logic_mult", 5);
		TraceIn("logic_mult", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LMUL18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logic_group17 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_group19 = default(AstParserRuleReturnScope<object, IToken>);

		object LMUL18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logic_mult");
		DebugLocation(95, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:96:2: ( logic_group ( LMUL ^ logic_group )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:96:4: logic_group ( LMUL ^ logic_group )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(96, 4);
			PushFollow(Follow._logic_group_in_logic_mult572);
			logic_group17=logic_group();
			PopFollow();

			adaptor.AddChild(root_0, logic_group17.Tree);
			DebugLocation(96, 16);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:96:16: ( LMUL ^ logic_group )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==LMUL))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:96:18: LMUL ^ logic_group
					{
					DebugLocation(96, 22);
					LMUL18=(IToken)Match(input,LMUL,Follow._LMUL_in_logic_mult576); 
					LMUL18_tree = (object)adaptor.Create(LMUL18);
					root_0 = (object)adaptor.BecomeRoot(LMUL18_tree, root_0);
					DebugLocation(96, 24);
					PushFollow(Follow._logic_group_in_logic_mult579);
					logic_group19=logic_group();
					PopFollow();

					adaptor.AddChild(root_0, logic_group19.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_mult", 5);
			LeaveRule("logic_mult", 5);
			LeaveRule_logic_mult();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_mult"); }
		return retval;

	}
	// $ANTLR end "logic_mult"

	partial void EnterRule_logic_add();
	partial void LeaveRule_logic_add();
	// $ANTLR start "logic_add"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:99:1: logic_add : logic_mult ( LADD ^ logic_mult )* ;
	[GrammarRule("logic_add")]
	private AstParserRuleReturnScope<object, IToken> logic_add()
	{
		EnterRule_logic_add();
		EnterRule("logic_add", 6);
		TraceIn("logic_add", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken LADD21 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logic_mult20 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_mult22 = default(AstParserRuleReturnScope<object, IToken>);

		object LADD21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logic_add");
		DebugLocation(99, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:100:2: ( logic_mult ( LADD ^ logic_mult )* )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:100:4: logic_mult ( LADD ^ logic_mult )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(100, 4);
			PushFollow(Follow._logic_mult_in_logic_add593);
			logic_mult20=logic_mult();
			PopFollow();

			adaptor.AddChild(root_0, logic_mult20.Tree);
			DebugLocation(100, 15);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:100:15: ( LADD ^ logic_mult )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==LADD))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:100:17: LADD ^ logic_mult
					{
					DebugLocation(100, 21);
					LADD21=(IToken)Match(input,LADD,Follow._LADD_in_logic_add597); 
					LADD21_tree = (object)adaptor.Create(LADD21);
					root_0 = (object)adaptor.BecomeRoot(LADD21_tree, root_0);
					DebugLocation(100, 23);
					PushFollow(Follow._logic_mult_in_logic_add600);
					logic_mult22=logic_mult();
					PopFollow();

					adaptor.AddChild(root_0, logic_mult22.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_add", 6);
			LeaveRule("logic_add", 6);
			LeaveRule_logic_add();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_add"); }
		return retval;

	}
	// $ANTLR end "logic_add"

	partial void EnterRule_assign();
	partial void LeaveRule_assign();
	// $ANTLR start "assign"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:104:1: assign : ID ASSIGN ^ logic_add ;
	[GrammarRule("assign")]
	private AstParserRuleReturnScope<object, IToken> assign()
	{
		EnterRule_assign();
		EnterRule("assign", 7);
		TraceIn("assign", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID23 = default(IToken);
		IToken ASSIGN24 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logic_add25 = default(AstParserRuleReturnScope<object, IToken>);

		object ID23_tree = default(object);
		object ASSIGN24_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assign");
		DebugLocation(104, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:105:2: ( ID ASSIGN ^ logic_add )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:105:4: ID ASSIGN ^ logic_add
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(105, 4);
			ID23=(IToken)Match(input,ID,Follow._ID_in_assign614); 
			ID23_tree = (object)adaptor.Create(ID23);
			adaptor.AddChild(root_0, ID23_tree);
			DebugLocation(105, 13);
			ASSIGN24=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign616); 
			ASSIGN24_tree = (object)adaptor.Create(ASSIGN24);
			root_0 = (object)adaptor.BecomeRoot(ASSIGN24_tree, root_0);
			DebugLocation(105, 15);
			PushFollow(Follow._logic_add_in_assign619);
			logic_add25=logic_add();
			PopFollow();

			adaptor.AddChild(root_0, logic_add25.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign", 7);
			LeaveRule("assign", 7);
			LeaveRule_assign();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "assign"); }
		return retval;

	}
	// $ANTLR end "assign"

	partial void EnterRule_assign_list();
	partial void LeaveRule_assign_list();
	// $ANTLR start "assign_list"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:108:1: assign_list : ( assign ( ',' assign )* )? -> ^( BLOCK ( assign )* ) ;
	[GrammarRule("assign_list")]
	private AstParserRuleReturnScope<object, IToken> assign_list()
	{
		EnterRule_assign_list();
		EnterRule("assign_list", 8);
		TraceIn("assign_list", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assign26 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assign28 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal27_tree = default(object);
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
		try { DebugEnterRule(GrammarFileName, "assign_list");
		DebugLocation(108, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:2: ( ( assign ( ',' assign )* )? -> ^( BLOCK ( assign )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:4: ( assign ( ',' assign )* )?
			{
			DebugLocation(109, 4);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:4: ( assign ( ',' assign )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==ID))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:6: assign ( ',' assign )*
				{
				DebugLocation(109, 6);
				PushFollow(Follow._assign_in_assign_list633);
				assign26=assign();
				PopFollow();

				stream_assign.Add(assign26.Tree);
				DebugLocation(109, 13);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:13: ( ',' assign )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==34))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:15: ',' assign
						{
						DebugLocation(109, 15);
						char_literal27=(IToken)Match(input,34,Follow._34_in_assign_list637);  
						stream_34.Add(char_literal27);

						DebugLocation(109, 19);
						PushFollow(Follow._assign_in_assign_list639);
						assign28=assign();
						PopFollow();

						stream_assign.Add(assign28.Tree);

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: assign
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:32: -> ^( BLOCK ( assign )* )
			{
				DebugLocation(109, 35);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:35: ^( BLOCK ( assign )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(109, 37);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(109, 43);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:109:43: ( assign )*
				while ( stream_assign.HasNext )
				{
					DebugLocation(109, 43);
					adaptor.AddChild(root_1, stream_assign.NextTree());

				}
				stream_assign.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign_list", 8);
			LeaveRule("assign_list", 8);
			LeaveRule_assign_list();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "assign_list"); }
		return retval;

	}
	// $ANTLR end "assign_list"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:112:1: expr : ( '{' ! expr_list '}' !| assign ';' !| READ ^ '(' ! ID ( ',' ! ID )* ');' !| WRITE ^ '(' ! logic_add ( ',' ! logic_add )* ');' !| IF ^ '(' ! logic_add ')' ! expr ( ELSE ! expr )? | FOR '(' assign_list ';' logic_add ';' assign_list ')' expr -> ^( FOR assign_list logic_add assign_list expr ) );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<object, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 9);
		TraceIn("expr", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken READ34 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken ID36 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken ID38 = default(IToken);
		IToken string_literal39 = default(IToken);
		IToken WRITE40 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken IF46 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken ELSE51 = default(IToken);
		IToken FOR53 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken char_literal60 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr_list30 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assign32 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_add42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_add44 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_add48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr50 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assign_list55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logic_add57 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assign_list59 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expr61 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal29_tree = default(object);
		object char_literal31_tree = default(object);
		object char_literal33_tree = default(object);
		object READ34_tree = default(object);
		object char_literal35_tree = default(object);
		object ID36_tree = default(object);
		object char_literal37_tree = default(object);
		object ID38_tree = default(object);
		object string_literal39_tree = default(object);
		object WRITE40_tree = default(object);
		object char_literal41_tree = default(object);
		object char_literal43_tree = default(object);
		object string_literal45_tree = default(object);
		object IF46_tree = default(object);
		object char_literal47_tree = default(object);
		object char_literal49_tree = default(object);
		object ELSE51_tree = default(object);
		object FOR53_tree = default(object);
		object char_literal54_tree = default(object);
		object char_literal56_tree = default(object);
		object char_literal58_tree = default(object);
		object char_literal60_tree = default(object);
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleITokenStream stream_FOR=new RewriteRuleITokenStream(adaptor,"token FOR");
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_assign_list=new RewriteRuleSubtreeStream(adaptor,"rule assign_list");
		RewriteRuleSubtreeStream stream_logic_add=new RewriteRuleSubtreeStream(adaptor,"rule logic_add");
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:113:2: ( '{' ! expr_list '}' !| assign ';' !| READ ^ '(' ! ID ( ',' ! ID )* ');' !| WRITE ^ '(' ! logic_add ( ',' ! logic_add )* ');' !| IF ^ '(' ! logic_add ')' ! expr ( ELSE ! expr )? | FOR '(' assign_list ';' logic_add ';' assign_list ')' expr -> ^( FOR assign_list logic_add assign_list expr ) )
			int alt12=6;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 36:
				{
				alt12 = 1;
				}
				break;
			case ID:
				{
				alt12 = 2;
				}
				break;
			case READ:
				{
				alt12 = 3;
				}
				break;
			case WRITE:
				{
				alt12 = 4;
				}
				break;
			case IF:
				{
				alt12 = 5;
				}
				break;
			case FOR:
				{
				alt12 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:113:4: '{' ! expr_list '}' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 7);
				char_literal29=(IToken)Match(input,36,Follow._36_in_expr665); 
				DebugLocation(113, 9);
				PushFollow(Follow._expr_list_in_expr668);
				expr_list30=expr_list();
				PopFollow();

				adaptor.AddChild(root_0, expr_list30.Tree);
				DebugLocation(113, 22);
				char_literal31=(IToken)Match(input,37,Follow._37_in_expr670); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:115:4: assign ';' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._assign_in_expr678);
				assign32=assign();
				PopFollow();

				adaptor.AddChild(root_0, assign32.Tree);
				DebugLocation(115, 14);
				char_literal33=(IToken)Match(input,35,Follow._35_in_expr680); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:117:4: READ ^ '(' ! ID ( ',' ! ID )* ');' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 8);
				READ34=(IToken)Match(input,READ,Follow._READ_in_expr688); 
				READ34_tree = (object)adaptor.Create(READ34);
				root_0 = (object)adaptor.BecomeRoot(READ34_tree, root_0);
				DebugLocation(117, 13);
				char_literal35=(IToken)Match(input,31,Follow._31_in_expr691); 
				DebugLocation(117, 15);
				ID36=(IToken)Match(input,ID,Follow._ID_in_expr694); 
				ID36_tree = (object)adaptor.Create(ID36);
				adaptor.AddChild(root_0, ID36_tree);
				DebugLocation(117, 18);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:117:18: ( ',' ! ID )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1==34))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:117:20: ',' ! ID
						{
						DebugLocation(117, 23);
						char_literal37=(IToken)Match(input,34,Follow._34_in_expr698); 
						DebugLocation(117, 25);
						ID38=(IToken)Match(input,ID,Follow._ID_in_expr701); 
						ID38_tree = (object)adaptor.Create(ID38);
						adaptor.AddChild(root_0, ID38_tree);

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(117, 34);
				string_literal39=(IToken)Match(input,33,Follow._33_in_expr705); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:118:4: WRITE ^ '(' ! logic_add ( ',' ! logic_add )* ');' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 9);
				WRITE40=(IToken)Match(input,WRITE,Follow._WRITE_in_expr711); 
				WRITE40_tree = (object)adaptor.Create(WRITE40);
				root_0 = (object)adaptor.BecomeRoot(WRITE40_tree, root_0);
				DebugLocation(118, 14);
				char_literal41=(IToken)Match(input,31,Follow._31_in_expr714); 
				DebugLocation(118, 16);
				PushFollow(Follow._logic_add_in_expr717);
				logic_add42=logic_add();
				PopFollow();

				adaptor.AddChild(root_0, logic_add42.Tree);
				DebugLocation(118, 26);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:118:26: ( ',' ! logic_add )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1==34))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:118:28: ',' ! logic_add
						{
						DebugLocation(118, 31);
						char_literal43=(IToken)Match(input,34,Follow._34_in_expr721); 
						DebugLocation(118, 33);
						PushFollow(Follow._logic_add_in_expr724);
						logic_add44=logic_add();
						PopFollow();

						adaptor.AddChild(root_0, logic_add44.Tree);

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }

				DebugLocation(118, 49);
				string_literal45=(IToken)Match(input,33,Follow._33_in_expr728); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:120:4: IF ^ '(' ! logic_add ')' ! expr ( ELSE ! expr )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(120, 6);
				IF46=(IToken)Match(input,IF,Follow._IF_in_expr736); 
				IF46_tree = (object)adaptor.Create(IF46);
				root_0 = (object)adaptor.BecomeRoot(IF46_tree, root_0);
				DebugLocation(120, 11);
				char_literal47=(IToken)Match(input,31,Follow._31_in_expr739); 
				DebugLocation(120, 13);
				PushFollow(Follow._logic_add_in_expr742);
				logic_add48=logic_add();
				PopFollow();

				adaptor.AddChild(root_0, logic_add48.Tree);
				DebugLocation(120, 26);
				char_literal49=(IToken)Match(input,32,Follow._32_in_expr744); 
				DebugLocation(120, 28);
				PushFollow(Follow._expr_in_expr747);
				expr50=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr50.Tree);
				DebugLocation(120, 33);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:120:33: ( ELSE ! expr )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==ELSE))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:120:35: ELSE ! expr
					{
					DebugLocation(120, 39);
					ELSE51=(IToken)Match(input,ELSE,Follow._ELSE_in_expr751); 
					DebugLocation(120, 41);
					PushFollow(Follow._expr_in_expr754);
					expr52=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr52.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:121:4: FOR '(' assign_list ';' logic_add ';' assign_list ')' expr
				{
				DebugLocation(121, 4);
				FOR53=(IToken)Match(input,FOR,Follow._FOR_in_expr762);  
				stream_FOR.Add(FOR53);

				DebugLocation(121, 8);
				char_literal54=(IToken)Match(input,31,Follow._31_in_expr764);  
				stream_31.Add(char_literal54);

				DebugLocation(121, 12);
				PushFollow(Follow._assign_list_in_expr766);
				assign_list55=assign_list();
				PopFollow();

				stream_assign_list.Add(assign_list55.Tree);
				DebugLocation(121, 24);
				char_literal56=(IToken)Match(input,35,Follow._35_in_expr768);  
				stream_35.Add(char_literal56);

				DebugLocation(121, 28);
				PushFollow(Follow._logic_add_in_expr770);
				logic_add57=logic_add();
				PopFollow();

				stream_logic_add.Add(logic_add57.Tree);
				DebugLocation(121, 38);
				char_literal58=(IToken)Match(input,35,Follow._35_in_expr772);  
				stream_35.Add(char_literal58);

				DebugLocation(121, 42);
				PushFollow(Follow._assign_list_in_expr774);
				assign_list59=assign_list();
				PopFollow();

				stream_assign_list.Add(assign_list59.Tree);
				DebugLocation(121, 54);
				char_literal60=(IToken)Match(input,32,Follow._32_in_expr776);  
				stream_32.Add(char_literal60);

				DebugLocation(121, 58);
				PushFollow(Follow._expr_in_expr778);
				expr61=expr();
				PopFollow();

				stream_expr.Add(expr61.Tree);


				{
				// AST REWRITE
				// elements: FOR, logic_add, assign_list, expr, assign_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 121:63: -> ^( FOR assign_list logic_add assign_list expr )
				{
					DebugLocation(121, 66);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:121:66: ^( FOR assign_list logic_add assign_list expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(121, 68);
					root_1 = (object)adaptor.BecomeRoot(stream_FOR.NextNode(), root_1);

					DebugLocation(121, 72);
					adaptor.AddChild(root_1, stream_assign_list.NextTree());
					DebugLocation(121, 84);
					adaptor.AddChild(root_1, stream_logic_add.NextTree());
					DebugLocation(121, 94);
					adaptor.AddChild(root_1, stream_assign_list.NextTree());
					DebugLocation(121, 106);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 9);
			LeaveRule("expr", 9);
			LeaveRule_expr();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();
	// $ANTLR start "expr_list"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:124:1: expr_list : ( expr )* -> ^( BLOCK ( expr )* ) ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<object, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 10);
		TraceIn("expr_list", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> expr62 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(124, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:2: ( ( expr )* -> ^( BLOCK ( expr )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:4: ( expr )*
			{
			DebugLocation(125, 4);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:4: ( expr )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==FOR||(LA13_1>=ID && LA13_1<=IF)||LA13_1==READ||LA13_1==WRITE||LA13_1==36))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:4: expr
					{
					DebugLocation(125, 4);
					PushFollow(Follow._expr_in_expr_list805);
					expr62=expr();
					PopFollow();

					stream_expr.Add(expr62.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 125:10: -> ^( BLOCK ( expr )* )
			{
				DebugLocation(125, 13);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:13: ^( BLOCK ( expr )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(125, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(125, 21);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:125:21: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(125, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 10);
			LeaveRule("expr_list", 10);
			LeaveRule_expr_list();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_result();
	partial void LeaveRule_result();
	// $ANTLR start "result"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:128:1: result : expr_list EOF -> ^( PROGRAM expr_list ) ;
	[GrammarRule("result")]
	private AstParserRuleReturnScope<object, IToken> result()
	{
		EnterRule_result();
		EnterRule("result", 11);
		TraceIn("result", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF64 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expr_list63 = default(AstParserRuleReturnScope<object, IToken>);

		object EOF64_tree = default(object);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "result");
		DebugLocation(128, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:129:2: ( expr_list EOF -> ^( PROGRAM expr_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:129:4: expr_list EOF
			{
			DebugLocation(129, 4);
			PushFollow(Follow._expr_list_in_result827);
			expr_list63=expr_list();
			PopFollow();

			stream_expr_list.Add(expr_list63.Tree);
			DebugLocation(129, 14);
			EOF64=(IToken)Match(input,EOF,Follow._EOF_in_result829);  
			stream_EOF.Add(EOF64);



			{
			// AST REWRITE
			// elements: expr_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 129:18: -> ^( PROGRAM expr_list )
			{
				DebugLocation(129, 21);
				// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:129:21: ^( PROGRAM expr_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(129, 24);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

				DebugLocation(129, 32);
				adaptor.AddChild(root_1, stream_expr_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("result", 11);
			LeaveRule("result", 11);
			LeaveRule_result();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "result"); }
		return retval;

	}
	// $ANTLR end "result"

	partial void EnterRule_execute();
	partial void LeaveRule_execute();
	// $ANTLR start "execute"
	// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:132:8: public execute : result ;
	[GrammarRule("execute")]
	public AstParserRuleReturnScope<object, IToken> execute()
	{
		EnterRule_execute();
		EnterRule("execute", 12);
		TraceIn("execute", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> result65 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "execute");
		DebugLocation(132, 1);
		try
		{
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:133:2: ( result )
			DebugEnterAlt(1);
			// C:\\Users\\Alexandr\\Desktop\\t_comp\\t_comp\\c.g:133:4: result
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(133, 4);
			PushFollow(Follow._result_in_execute852);
			result65=result();
			PopFollow();

			adaptor.AddChild(root_0, result65.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("execute", 12);
			LeaveRule("execute", 12);
			LeaveRule_execute();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "execute"); }
		return retval;

	}
	// $ANTLR end "execute"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _31_in_value_group430 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _value_add_in_value_group433 = new BitSet(new ulong[]{0x0000000100000000UL});
		public static readonly BitSet _32_in_value_group435 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _NUMBER_in_value_group440 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _STRING_in_value_group444 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ID_in_value_group448 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _LOGIC_in_value_group452 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _value_group_in_value_mult464 = new BitSet(new ulong[]{0x0000000000200082UL});
		public static readonly BitSet _set_in_value_mult468 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _value_group_in_value_mult479 = new BitSet(new ulong[]{0x0000000000200082UL});
		public static readonly BitSet _value_mult_in_value_add494 = new BitSet(new ulong[]{0x0000000010000012UL});
		public static readonly BitSet _set_in_value_add498 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _value_mult_in_value_add509 = new BitSet(new ulong[]{0x0000000010000012UL});
		public static readonly BitSet _value_add_in_logic_group526 = new BitSet(new ulong[]{0x0000000000491A02UL});
		public static readonly BitSet _set_in_logic_group530 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _value_add_in_logic_group557 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _logic_group_in_logic_mult572 = new BitSet(new ulong[]{0x0000000000020002UL});
		public static readonly BitSet _LMUL_in_logic_mult576 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_group_in_logic_mult579 = new BitSet(new ulong[]{0x0000000000020002UL});
		public static readonly BitSet _logic_mult_in_logic_add593 = new BitSet(new ulong[]{0x0000000000008002UL});
		public static readonly BitSet _LADD_in_logic_add597 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_mult_in_logic_add600 = new BitSet(new ulong[]{0x0000000000008002UL});
		public static readonly BitSet _ID_in_assign614 = new BitSet(new ulong[]{0x0000000000000020UL});
		public static readonly BitSet _ASSIGN_in_assign616 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_add_in_assign619 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assign_in_assign_list633 = new BitSet(new ulong[]{0x0000000400000002UL});
		public static readonly BitSet _34_in_assign_list637 = new BitSet(new ulong[]{0x0000000000002000UL});
		public static readonly BitSet _assign_in_assign_list639 = new BitSet(new ulong[]{0x0000000400000002UL});
		public static readonly BitSet _36_in_expr665 = new BitSet(new ulong[]{0x0000003022006400UL});
		public static readonly BitSet _expr_list_in_expr668 = new BitSet(new ulong[]{0x0000002000000000UL});
		public static readonly BitSet _37_in_expr670 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assign_in_expr678 = new BitSet(new ulong[]{0x0000000800000000UL});
		public static readonly BitSet _35_in_expr680 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _READ_in_expr688 = new BitSet(new ulong[]{0x0000000080000000UL});
		public static readonly BitSet _31_in_expr691 = new BitSet(new ulong[]{0x0000000000002000UL});
		public static readonly BitSet _ID_in_expr694 = new BitSet(new ulong[]{0x0000000600000000UL});
		public static readonly BitSet _34_in_expr698 = new BitSet(new ulong[]{0x0000000000002000UL});
		public static readonly BitSet _ID_in_expr701 = new BitSet(new ulong[]{0x0000000600000000UL});
		public static readonly BitSet _33_in_expr705 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _WRITE_in_expr711 = new BitSet(new ulong[]{0x0000000080000000UL});
		public static readonly BitSet _31_in_expr714 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_add_in_expr717 = new BitSet(new ulong[]{0x0000000600000000UL});
		public static readonly BitSet _34_in_expr721 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_add_in_expr724 = new BitSet(new ulong[]{0x0000000600000000UL});
		public static readonly BitSet _33_in_expr728 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _IF_in_expr736 = new BitSet(new ulong[]{0x0000000080000000UL});
		public static readonly BitSet _31_in_expr739 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_add_in_expr742 = new BitSet(new ulong[]{0x0000000100000000UL});
		public static readonly BitSet _32_in_expr744 = new BitSet(new ulong[]{0x0000001022006400UL});
		public static readonly BitSet _expr_in_expr747 = new BitSet(new ulong[]{0x0000000000000102UL});
		public static readonly BitSet _ELSE_in_expr751 = new BitSet(new ulong[]{0x0000001022006400UL});
		public static readonly BitSet _expr_in_expr754 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _FOR_in_expr762 = new BitSet(new ulong[]{0x0000000080000000UL});
		public static readonly BitSet _31_in_expr764 = new BitSet(new ulong[]{0x0000000800002000UL});
		public static readonly BitSet _assign_list_in_expr766 = new BitSet(new ulong[]{0x0000000800000000UL});
		public static readonly BitSet _35_in_expr768 = new BitSet(new ulong[]{0x0000000088842000UL});
		public static readonly BitSet _logic_add_in_expr770 = new BitSet(new ulong[]{0x0000000800000000UL});
		public static readonly BitSet _35_in_expr772 = new BitSet(new ulong[]{0x0000000100002000UL});
		public static readonly BitSet _assign_list_in_expr774 = new BitSet(new ulong[]{0x0000000100000000UL});
		public static readonly BitSet _32_in_expr776 = new BitSet(new ulong[]{0x0000001022006400UL});
		public static readonly BitSet _expr_in_expr778 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expr_in_expr_list805 = new BitSet(new ulong[]{0x0000001022006402UL});
		public static readonly BitSet _expr_list_in_result827 = new BitSet(new ulong[]{0x0000000000000000UL});
		public static readonly BitSet _EOF_in_result829 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _result_in_execute852 = new BitSet(new ulong[]{0x0000000000000002UL});
	}
	#endregion Follow sets
}

} // namespace  t_comp 
